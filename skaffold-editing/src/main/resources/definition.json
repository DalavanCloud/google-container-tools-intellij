{
  "swagger": "2.0",
  "info": {
    "title": "Skaffold Schema",
    "version": "skaffold/v1alpha4"
  },
  "paths": {

    "/apis/skaffold/v1alpha2/namespaces/{namespace}/configs": {

      "get": {
        "description": "list or watch objects of kind Deployment",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "skaffold_v1alpha2"
        ],
        "operationId": "listAppsV1NamespacedDeployment",
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "name": "continue",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "boolean",
            "description": "If true, partially initialized resources are included in the response.",
            "name": "includeUninitialized",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "integer",
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "name": "limit",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "name": "resourceVersion",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "integer",
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "name": "timeoutSeconds",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "boolean",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list"

      },
      "post": {
        "description": "create a Deployment",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "skaffold_v1alpha2"
        ],
        "operationId": "createAppsV1NamespacedDeployment",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/latest.SkaffoldPipeline"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/latest.SkaffoldPipeline"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/latest.SkaffoldPipeline"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/latest.SkaffoldPipeline"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post"

      },

      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "object name and auth scope, such as for teams and projects",
          "name": "namespace",
          "in": "path",
          "required": true
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "If 'true', then the output is pretty printed.",
          "name": "pretty",
          "in": "query"
        }
      ]
    }


  },
  "definitions": {
    "latest.Artifact": {
      "description": "Artifact represents items that need to be built, along with the context in which they should be built.",
      "properties": {
        "bazel": {
          "$ref": "#/definitions/latest.BazelArtifact"
        },
        "context": {
          "type": "string"
        },
        "docker": {
          "$ref": "#/definitions/latest.DockerArtifact"
        },
        "image": {
          "type": "string"
        },
        "jibGradle": {
          "$ref": "#/definitions/latest.JibGradleArtifact"
        },
        "jibMaven": {
          "$ref": "#/definitions/latest.JibMavenArtifact"
        },
        "sync": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "latest.ArtifactType": {
      "properties": {
        "bazel": {
          "$ref": "#/definitions/latest.BazelArtifact"
        },
        "docker": {
          "$ref": "#/definitions/latest.DockerArtifact"
        },
        "jibGradle": {
          "$ref": "#/definitions/latest.JibGradleArtifact"
        },
        "jibMaven": {
          "$ref": "#/definitions/latest.JibMavenArtifact"
        }
      }
    },
    "latest.AzureContainerBuild": {
      "description": "AzureContainerBuild contains the fields needed to do a build on Azure Container Registry",
      "properties": {
        "clientID": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "subscriptionID": {
          "type": "string"
        },
        "tenantID": {
          "type": "string"
        }
      }
    },
    "latest.BazelArtifact": {
      "description": "Bazel describes an artifact built with Bazel.",
      "properties": {
        "target": {
          "type": "string"
        }
      }
    },
    "latest.BuildConfig": {
      "description": "BuildConfig contains all the configuration for the build steps",
      "properties": {
        "artifacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/latest.Artifact"
          }
        },
        "azureContainerBuild": {
          "$ref": "#/definitions/latest.AzureContainerBuild"
        },
        "googleCloudBuild": {
          "$ref": "#/definitions/latest.GoogleCloudBuild"
        },
        "kaniko": {
          "$ref": "#/definitions/latest.KanikoBuild"
        },
        "local": {
          "$ref": "#/definitions/latest.LocalBuild"
        },
        "tagPolicy": {
          "$ref": "#/definitions/latest.TagPolicy"
        }
      }
    },
    "latest.BuildType": {
      "description": "BuildType contains the specific implementation and parameters needed for the build step. Only one field should be populated.",
      "properties": {
        "azureContainerBuild": {
          "$ref": "#/definitions/latest.AzureContainerBuild"
        },
        "googleCloudBuild": {
          "$ref": "#/definitions/latest.GoogleCloudBuild"
        },
        "kaniko": {
          "$ref": "#/definitions/latest.KanikoBuild"
        },
        "local": {
          "$ref": "#/definitions/latest.LocalBuild"
        }
      }
    },
    "latest.DateTimeTagger": {
      "description": "DateTimeTagger contains the configuration for the DateTime tagger.",
      "properties": {
        "format": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        }
      }
    },
    "latest.DeployConfig": {
      "description": "DeployConfig contains all the configuration needed by the deploy steps",
      "properties": {
        "helm": {
          "$ref": "#/definitions/latest.HelmDeploy"
        },
        "kubectl": {
          "$ref": "#/definitions/latest.KubectlDeploy"
        },
        "kustomize": {
          "$ref": "#/definitions/latest.KustomizeDeploy"
        }
      }
    },
    "latest.DeployType": {
      "description": "DeployType contains the specific implementation and parameters needed for the deploy step. Only one field should be populated.",
      "properties": {
        "helm": {
          "$ref": "#/definitions/latest.HelmDeploy"
        },
        "kubectl": {
          "$ref": "#/definitions/latest.KubectlDeploy"
        },
        "kustomize": {
          "$ref": "#/definitions/latest.KustomizeDeploy"
        }
      }
    },
    "latest.DockerArtifact": {
      "description": "Docker describes an artifact built from a Dockerfile, usually using `docker build`.",
      "properties": {
        "buildArgs": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "cacheFrom": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dockerfile": {
          "type": "string"
        },
        "target": {
          "type": "string"
        }
      }
    },
    "latest.EnvTemplateTagger": {
      "description": "EnvTemplateTagger contains the configuration for the envTemplate tagger.",
      "properties": {
        "template": {
          "type": "string"
        }
      }
    },
    "latest.GitTagger": {
      "description": "GitTagger contains the configuration for the git tagger."
    },
    "latest.GoogleCloudBuild": {
      "description": "GoogleCloudBuild contains the fields needed to do a remote build on Google Cloud Build.",
      "properties": {
        "diskSizeGb": {
          "type": "integer",
          "format": "int64"
        },
        "dockerImage": {
          "type": "string"
        },
        "machineType": {
          "type": "string"
        },
        "projectID": {
          "type": "string"
        },
        "timeout": {
          "type": "string"
        }
      }
    },
    "latest.HelmConventionConfig": {
      "description": "HelmConventionConfig represents image config in the syntax of image.repository and image.tag"
    },
    "latest.HelmDeploy": {
      "description": "HelmDeploy contains the configuration needed for deploying with helm",
      "properties": {
        "releases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/latest.HelmRelease"
          }
        }
      }
    },
    "latest.HelmFQNConfig": {
      "description": "HelmFQNConfig represents image config to use the FullyQualifiedImageName as param to set",
      "properties": {
        "property": {
          "type": "string"
        }
      }
    },
    "latest.HelmImageConfig": {
      "properties": {
        "fqn": {
          "$ref": "#/definitions/latest.HelmFQNConfig"
        },
        "helm": {
          "$ref": "#/definitions/latest.HelmConventionConfig"
        }
      }
    },
    "latest.HelmImageStrategy": {
      "properties": {
        "fqn": {
          "$ref": "#/definitions/latest.HelmFQNConfig"
        },
        "helm": {
          "$ref": "#/definitions/latest.HelmConventionConfig"
        }
      }
    },
    "latest.HelmPackaged": {
      "description": "HelmPackaged represents parameters for packaging helm chart.",
      "properties": {
        "appVersion": {
          "description": "AppVersion set the appVersion on the chart to this version",
          "type": "string"
        },
        "version": {
          "description": "Version sets the version on the chart to this semver version.",
          "type": "string"
        }
      }
    },
    "latest.HelmRelease": {
      "properties": {
        "chartPath": {
          "type": "string"
        },
        "imageStrategy": {
          "$ref": "#/definitions/latest.HelmImageStrategy"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "overrides": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "packaged": {
          "$ref": "#/definitions/latest.HelmPackaged"
        },
        "recreatePods": {
          "type": "boolean"
        },
        "setValueTemplates": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "setValues": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "values": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "valuesFiles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "version": {
          "type": "string"
        },
        "wait": {
          "type": "boolean"
        }
      }
    },
    "latest.JibGradleArtifact": {
      "required": [
        "project"
      ],
      "properties": {
        "project": {
          "description": "Only multi-module",
          "type": "string"
        }
      }
    },
    "latest.JibMavenArtifact": {
      "required": [
        "module",
        "profile"
      ],
      "properties": {
        "module": {
          "description": "Only multi-module",
          "type": "string"
        },
        "profile": {
          "type": "string"
        }
      }
    },
    "latest.KanikoBuild": {
      "description": "KanikoBuild contains the fields needed to do a on-cluster build using the kaniko image",
      "properties": {
        "buildContext": {
          "$ref": "#/definitions/latest.KanikoBuildContext"
        },
        "image": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "pullSecret": {
          "type": "string"
        },
        "pullSecretName": {
          "type": "string"
        },
        "timeout": {
          "type": "string"
        }
      }
    },
    "latest.KanikoBuildContext": {
      "description": "KanikoBuildContext contains the different fields available to specify a kaniko build context",
      "properties": {
        "gcsBucket": {
          "type": "string"
        },
        "localDir": {
          "$ref": "#/definitions/latest.LocalDir"
        }
      }
    },
    "latest.KubectlDeploy": {
      "description": "KubectlDeploy contains the configuration needed for deploying with `kubectl apply`",
      "properties": {
        "flags": {
          "$ref": "#/definitions/latest.KubectlFlags"
        },
        "manifests": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "remoteManifests": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "latest.KubectlFlags": {
      "description": "KubectlFlags describes additional options flags that are passed on the command line to kubectl either on every command (Global), on creations (Apply) or deletions (Delete).",
      "properties": {
        "apply": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "delete": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "global": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "latest.KustomizeDeploy": {
      "description": "KustomizeDeploy contains the configuration needed for deploying with kustomize.",
      "properties": {
        "flags": {
          "$ref": "#/definitions/latest.KubectlFlags"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "latest.LocalBuild": {
      "description": "LocalBuild contains the fields needed to do a build on the local docker daemon and optionally push to a repository.",
      "properties": {
        "push": {
          "type": "boolean"
        },
        "useBuildkit": {
          "type": "boolean"
        },
        "useDockerCLI": {
          "type": "boolean"
        }
      }
    },
    "latest.LocalDir": {
      "description": "LocalDir represents the local directory kaniko build context"
    },
    "latest.Profile": {
      "description": "Profile is additional configuration that overrides default configuration when it is activated.",
      "properties": {
        "build": {
          "$ref": "#/definitions/latest.BuildConfig"
        },
        "deploy": {
          "$ref": "#/definitions/latest.DeployConfig"
        },
        "name": {
          "type": "string"
        },
        "test": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/latest.TestCase"
          }
        }
      }
    },
    "latest.ShaTagger": {
      "description": "ShaTagger contains the configuration for the SHA tagger."
    },
    "latest.SkaffoldPipeline": {
      "description": "SkaffoldPipeline defines the pipeline configuration for skaffold",
      "required": [
        "apiVersion",
        "kind"
      ],
      "properties": {
        "apiVersion": {
          "description": "apiVersion defines the version of the Pipeline API for skaffold",
          "type": "string"
        },
        "build": {
          "$ref": "#/definitions/latest.BuildConfig"
        },
        "deploy": {
          "$ref": "#/definitions/latest.DeployConfig"
        },
        "kind": {
          "description": "kind should be",
          "type": "string"
        },
        "profiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/latest.Profile"
          }
        },
        "test": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/latest.TestCase"
          }
        }
      }
    },
    "latest.TagPolicy": {
      "description": "TagPolicy contains all the configuration for the tagging step",
      "properties": {
        "dateTime": {
          "$ref": "#/definitions/latest.DateTimeTagger"
        },
        "envTemplate": {
          "$ref": "#/definitions/latest.EnvTemplateTagger"
        },
        "gitCommit": {
          "$ref": "#/definitions/latest.GitTagger"
        },
        "sha256": {
          "$ref": "#/definitions/latest.ShaTagger"
        }
      }
    },
    "latest.TestCase": {
      "description": "TestCase is a struct containing all the specified test configuration for an image.",
      "required": [
        "image"
      ],
      "properties": {
        "image": {
          "type": "string"
        },
        "structureTests": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    }
  }
}